{"ast":null,"code":"import axios from \"axios\";\nimport { baseUrl } from \"../../api\";\nimport { GET_PROFILE, GET_PROFILE_SUCCESS, GET_PROFILE_FAILURE, LOGOUT, UPDATE_PROFILE, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAILURE, UPDATE_PROFILE_IMAGE, UPDATE_PROFILE_IMAGE_SUCCESS, UPDATE_PROFILE_IMAGE_FAILURE, LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE, FETCH_BALANCE, FETCH_BALANCE_SUCCESS, FETCH_BALANCE_FAILURE, REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE } from \"./../types/actionTypes\";\nexport const loginUser = (email, password) => async dispatch => {\n  dispatch({\n    type: LOGIN\n  });\n  try {\n    const response = await axios.post(`${baseUrl}login`, {\n      email,\n      password\n    });\n    if (response.data.status === 0) {\n      console.log(response.data.data.token);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: response.data.data\n      });\n    } else {\n      dispatch({\n        type: LOGIN_FAILURE,\n        error: response.data.message\n      });\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Terjadi Kesalahan\";\n    dispatch({\n      type: LOGIN_FAILURE,\n      error: errorMessage\n    });\n  }\n};\nexport const loadProfileAction = token => async dispatch => {\n  dispatch({\n    type: GET_PROFILE\n  });\n  try {\n    const response = await axios.get(`${baseUrl}profile`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: GET_PROFILE_SUCCESS,\n      payload: response.data.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_PROFILE_FAILURE,\n      error: \"Failed to load profile data.\"\n    });\n  }\n};\nexport const updateProfileAction = (firstName, lastName, token) => async dispatch => {\n  dispatch({\n    type: UPDATE_PROFILE\n  });\n  try {\n    const response = await axios.put(`${baseUrl}profile/update`, {\n      first_name: firstName,\n      last_name: lastName\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAILURE,\n      payload: error.message || \"Gagal memperbarui profil\"\n    });\n    throw new Error(error.message || \"Gagal memperbarui profil\");\n  } finally {\n    dispatch(loadProfileAction(token));\n  }\n};\nexport const updateProfileImageAction = (imageData, token) => async dispatch => {\n  dispatch({\n    type: UPDATE_PROFILE_IMAGE\n  });\n  try {\n    await axios.put(`${baseUrl}profile/image`, imageData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    dispatch({\n      type: UPDATE_PROFILE_IMAGE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_IMAGE_FAILURE,\n      error: \"Failed to update profile image.\"\n    });\n  } finally {\n    dispatch(loadProfileAction(token));\n  }\n};\nexport const logoutAction = () => {\n  localStorage.removeItem(\"token\");\n  return {\n    type: LOGOUT\n  };\n};\nexport const fetchBalanceAction = token => async dispatch => {\n  dispatch({\n    type: FETCH_BALANCE\n  });\n  try {\n    const response = await axios.get(`${baseUrl}balance`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.data.status === 0) {\n      dispatch({\n        type: FETCH_BALANCE_SUCCESS,\n        payload: response.data.data.balance\n      });\n    } else {\n      dispatch({\n        type: FETCH_BALANCE_FAILURE,\n        error: response.data.message || \"Failed to fetch balance.\"\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: FETCH_BALANCE_FAILURE,\n      error: \"Terjadi kesalahan saat memuat saldo.\"\n    });\n  }\n};\nexport const registerUserAction = (email, namaDepan, namaBelakang, password) => async dispatch => {\n  dispatch({\n    type: REGISTER\n  });\n  try {\n    const response = await axios.post(`${baseUrl}registration`, {\n      email,\n      first_name: namaDepan,\n      last_name: namaBelakang,\n      password\n    });\n    if (response.data.status === 0) {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: response.data.message\n      });\n    } else {\n      dispatch({\n        type: REGISTER_FAILURE,\n        error: response.data.message || \"Terjadi Kesalahan\"\n      });\n    }\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Terjadi Kesalahan\";\n    dispatch({\n      type: REGISTER_FAILURE,\n      error: errorMessage\n    });\n  }\n};","map":{"version":3,"names":["axios","baseUrl","GET_PROFILE","GET_PROFILE_SUCCESS","GET_PROFILE_FAILURE","LOGOUT","UPDATE_PROFILE","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAILURE","UPDATE_PROFILE_IMAGE","UPDATE_PROFILE_IMAGE_SUCCESS","UPDATE_PROFILE_IMAGE_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","FETCH_BALANCE","FETCH_BALANCE_SUCCESS","FETCH_BALANCE_FAILURE","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","loginUser","email","password","dispatch","type","response","post","data","status","console","log","token","payload","error","message","_error$response","_error$response$data","errorMessage","loadProfileAction","get","headers","Authorization","updateProfileAction","firstName","lastName","put","first_name","last_name","Error","updateProfileImageAction","imageData","logoutAction","localStorage","removeItem","fetchBalanceAction","balance","registerUserAction","namaDepan","namaBelakang","_error$response2","_error$response2$data"],"sources":["C:/Users/arief/OneDrive/Documents/reactJS/sims_ppob-arief_febrian/src/redux/actions/authActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { baseUrl } from \"../../api\";\r\nimport {\r\n     GET_PROFILE,\r\n     GET_PROFILE_SUCCESS,\r\n     GET_PROFILE_FAILURE,\r\n     LOGOUT,\r\n     UPDATE_PROFILE,\r\n     UPDATE_PROFILE_SUCCESS,\r\n     UPDATE_PROFILE_FAILURE,\r\n     UPDATE_PROFILE_IMAGE,\r\n     UPDATE_PROFILE_IMAGE_SUCCESS,\r\n     UPDATE_PROFILE_IMAGE_FAILURE,\r\n     LOGIN,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAILURE,\r\n     FETCH_BALANCE,\r\n     FETCH_BALANCE_SUCCESS,\r\n     FETCH_BALANCE_FAILURE,\r\n     REGISTER,\r\n     REGISTER_SUCCESS,\r\n     REGISTER_FAILURE,\r\n} from \"./../types/actionTypes\";\r\n\r\nexport const loginUser = (email, password) => async (dispatch) => {\r\n     dispatch({ type: LOGIN });\r\n     try {\r\n          const response = await axios.post(`${baseUrl}login`, { email, password });\r\n\r\n          if (response.data.status === 0) {\r\n               console.log(response.data.data.token)\r\n               dispatch({ type: LOGIN_SUCCESS, payload: response.data.data });\r\n          } else {\r\n               dispatch({ type: LOGIN_FAILURE, error: response.data.message });\r\n          }\r\n     } catch (error) {\r\n          const errorMessage = error.response?.data?.message || \"Terjadi Kesalahan\";\r\n          dispatch({ type: LOGIN_FAILURE, error: errorMessage });\r\n     }\r\n};\r\n\r\nexport const loadProfileAction = (token) => async (dispatch) => {\r\n     dispatch({ type: GET_PROFILE });\r\n     try {\r\n          const response = await axios.get(`${baseUrl}profile`, {\r\n               headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          dispatch({\r\n               type: GET_PROFILE_SUCCESS,\r\n               payload: response.data.data,\r\n          });\r\n     } catch (error) {\r\n          dispatch({\r\n               type: GET_PROFILE_FAILURE,\r\n               error: \"Failed to load profile data.\",\r\n          });\r\n     }\r\n};\r\n\r\nexport const updateProfileAction = (firstName, lastName, token) => async (dispatch) => {\r\n     dispatch({ type: UPDATE_PROFILE })\r\n     try {\r\n          const response = await axios.put(\r\n               `${baseUrl}profile/update`,\r\n               { first_name: firstName, last_name: lastName },\r\n               { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n\r\n          dispatch({\r\n               type: UPDATE_PROFILE_SUCCESS,\r\n               payload: response.data,\r\n          });\r\n     } catch (error) {\r\n          dispatch({\r\n               type: UPDATE_PROFILE_FAILURE,\r\n               payload: error.message || \"Gagal memperbarui profil\",\r\n          });\r\n          throw new Error(error.message || \"Gagal memperbarui profil\");\r\n     } finally {\r\n          dispatch(loadProfileAction(token));\r\n     }\r\n};\r\n\r\nexport const updateProfileImageAction = (imageData, token) => async (dispatch) => {\r\n     dispatch({ type: UPDATE_PROFILE_IMAGE });\r\n     try {\r\n          await axios.put(`${baseUrl}profile/image`, imageData, {\r\n               headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"multipart/form-data\",\r\n               },\r\n          });\r\n          dispatch({\r\n               type: UPDATE_PROFILE_IMAGE_SUCCESS,\r\n          });\r\n     } catch (error) {\r\n          dispatch({\r\n               type: UPDATE_PROFILE_IMAGE_FAILURE,\r\n               error: \"Failed to update profile image.\",\r\n          });\r\n     } finally {\r\n          dispatch(loadProfileAction(token));\r\n     }\r\n};\r\n\r\nexport const logoutAction = () => {\r\n     localStorage.removeItem(\"token\");\r\n     return { type: LOGOUT };\r\n };\r\n\r\nexport const fetchBalanceAction = (token) => async (dispatch) => {\r\n     dispatch({ type: FETCH_BALANCE });\r\n     try {\r\n          const response = await axios.get(`${baseUrl}balance`, {\r\n               headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          if (response.data.status === 0) {\r\n               dispatch({\r\n                    type: FETCH_BALANCE_SUCCESS,\r\n                    payload: response.data.data.balance,\r\n               });\r\n          } else {\r\n               dispatch({\r\n                    type: FETCH_BALANCE_FAILURE,\r\n                    error: response.data.message || \"Failed to fetch balance.\",\r\n               });\r\n          }\r\n     } catch (error) {\r\n          dispatch({\r\n               type: FETCH_BALANCE_FAILURE,\r\n               error: \"Terjadi kesalahan saat memuat saldo.\",\r\n          });\r\n     }\r\n};\r\n\r\nexport const registerUserAction = (email, namaDepan, namaBelakang, password) => async (dispatch) => {\r\n     dispatch({ type: REGISTER });\r\n     try {\r\n          const response = await axios.post(`${baseUrl}registration`, {\r\n               email,\r\n               first_name: namaDepan,\r\n               last_name: namaBelakang,\r\n               password,\r\n          });\r\n\r\n          if (response.data.status === 0) {\r\n               dispatch({\r\n                    type: REGISTER_SUCCESS,\r\n                    payload: response.data.message,\r\n               });\r\n          } else {\r\n               dispatch({\r\n                    type: REGISTER_FAILURE,\r\n                    error: response.data.message || \"Terjadi Kesalahan\",\r\n               });\r\n          }\r\n     } catch (error) {\r\n          const errorMessage = error.response?.data?.message || \"Terjadi Kesalahan\";\r\n          dispatch({\r\n               type: REGISTER_FAILURE,\r\n               error: errorMessage,\r\n          });\r\n     }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}